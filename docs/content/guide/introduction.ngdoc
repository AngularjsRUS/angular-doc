@ngdoc overview
@name Developer Guide: Введение
@description

Angular это сугубо клиентская технология, полностью написанная на JavaScript. Он использует широко распространенные веб-технологии (HTML, CSS и JavaScript), делая разработку веб-приложений проще и быстрее, чем когда-либо прежде.

Одним из важных способов, которым Angular упрощает веб-разработку, является увеличение уровня абстракции между разработчиком и большинством низкоуровневых веб-разработчиков приложений. Angular автоматически берет на себя многие из этих задач, в том числе:

  * Манипуляции с DOM
  * Установка наблюдателей и уведомителей
  * Валидация входных данных

Потому обработчики Angular делают большую часть работы, связанной с этими задачами, а разработчики могут сконцентрироваться на логике приложения, а не на монотонном, подверженном ошибкам, более низком уровне кодирования.

В то время как Angular упрощает разработку веб-приложений, он задействует сравнительно сложные технологии на стороне клиента, в том числе:

  * Отделение данных от логики приложения и представления
  * Связывание данных между данными и представлением
  * Сервисы (стандартные операции веб-приложения, реализованные в виде замещения объектов)
  * Внедрение зависимости (используется в основном для связи вместе с сервисами)
  * Расширяемый компилятор HTML (полностью написан на JavaScript)
  * Простота тестирования

Раньше подобные методы по большей части отсутствовали на стороне клиента. 

## Одностраничные / многостраничные приложения

Можно использовать Angular для разработки как одностраничных, так и многостраничных приложений, но Angular предназначен в первую очередь для разработки одностраничного приложения. Angular поддерживает историю браузера, кнопки вперед / назад и закладки на одностраничное приложение.

Разумеется вы не хотите загружать Angular для каждой измененной страницы, как было бы в случае с использованием Angular в многостраничном приложении. Тем не менее, это имело бы смысл, если добавить подмножество особенностей Angular (например, шаблоны для трансляции особенностей связывания данных в Angular), в существующие многостраничные приложения. Можете прочитать этот курс действий, если вы перешли со старого приложения к одностраничному приложению Angular.
