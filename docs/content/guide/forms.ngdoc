@ngdoc overview
@name Формы
@description

Элементы управления (`input`, `select`, `textarea`), являются одним из способов для ввода пользовательских данных. 
Форма представляет собой коллекцию элементов управления с целью группировки связанных элементов вместе.

Форма и элементы управления обеспечивают валидацию сервисов, так что пользователь может быть уведомлен о 
некорректном вводе. Это улучшает пользовательский опыт, так как пользователь получает мгновенную обратную связь 
о том, как исправить ошибку. Имейте в виду, что в то время как проверка на стороне клиента играет важную роль
в обеспечении хорошего пользовательского опыта, ее можно легко обойти, и, следовательно, не стоит полагаться
только на эту проверку. Проверка на стороне сервера по-прежнему необходима в целях безопасности.


# Простая форма
Основной директивой понимающей двустороннее связывание данных является 
{@link api/ng.directive:ngModel ngModel}. Директива `NgModel` предусматривает двустороннее связывание данных
путем синхронизации модели с представлением, а также вида с моделью. Кроме того, она предоставляет 
{@link api/ng.directive:ngModel.NgModelController API} для других директив, чтобы расширить их поведение.

<doc:example>
<doc:source>
<div ng-controller="Controller">
  <form novalidate class="simple-form">
    Name: <input type="text" ng-model="user.name" /><br />
    E-mail: <input type="email" ng-model="user.email" /><br />
    Gender: <input type="radio" ng-model="user.gender" value="male" />male
    <input type="radio" ng-model="user.gender" value="female" />female<br />
    <button ng-click="reset()">RESET</button>
    <button ng-click="update(user)">SAVE</button>
  </form>
  <pre>form = {{user | json}}</pre>
  <pre>master = {{master | json}}</pre>
</div>

<script>
  function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      $scope.user = angular.copy($scope.master);
    };

    $scope.reset();
  }
  </script>
</doc:source>
</doc:example>


Заметьте, что `novalidate` используется для отключения нативной проверки формы браузером.



# Использование CSS классов

Для предоставления возможности оформления форм так же, как и элементов управления, `ngModel` добавляется такие CSS классы:

- `ng-valid`
- `ng-invalid`
- `ng-pristine`
- `ng-dirty`

Пример ниже использует CSS для отображения валидности каждого элемента формы. В примере поля `user.name` и `user.email` обязательны к заполнению, но красный фон у них отображается только когда с ними уже взаимодествовали. Это помогает пользователю не отвлекаться на ошибку пока он не введет в поле данные, которые не удовлетворяют правилам валидации этого поля.

<doc:example>
<doc:source>
<div ng-controller="Controller">
  <form novalidate class="css-form">
    Name:
      <input type="text" ng-model="user.name" required /><br />
    E-mail: <input type="email" ng-model="user.email" required /><br />
    Gender: <input type="radio" ng-model="user.gender" value="male" />male
    <input type="radio" ng-model="user.gender" value="female" />female<br />
    <button ng-click="reset()">RESET</button>
    <button ng-click="update(user)">SAVE</button>
  </form>
</div>

<style type="text/css">
  .css-form input.ng-invalid.ng-dirty {
    background-color: #FA787E;
  }

  .css-form input.ng-valid.ng-dirty {
    background-color: #78FA89;
  }
</style>

<script>
  function Controller($scope) {
    $scope.master = {};

    $scope.update = function(user) {
      $scope.master = angular.copy(user);
    };

    $scope.reset = function() {
      $scope.user = angular.copy($scope.master);
    };

    $scope.reset();
  }
  </script>
</doc:source>
</doc:example>



# Связь формы с элементами управления

Форма - это экземпляр объекта {@link api/ng.directive:form.FormController FormController}. Экземпляр формы может быть опционально опубликован в область видимости с использованием атрибута `name`. Также элемент управления является экземпляром {@link api/ng.directive:ngModel.NgModelController NgModelController}. Экземпляр элемента управления также может быть опубликован в экземпляре формы с использованием атрибута `name`. Это означает, что внутреннее состояние и формы и элемента управления доступны для связывания в представлении путем использования стандартных примитивов.

Это позволяет нам расширить пример выше такой функциональностью:

- кнопка RESET активизируется только если в форме что-то изменилось
- кнопка SAVE активизируется только если в форме что-то изменилось и форма при этом валидна
- собственные сообщения об ошибках для `user.email` и `user.agree`

<doc:example>
<doc:source>
<div ng-controller="Controller">
  <form name="form" class="css-form" novalidate>
    Name:
      <input type="text" ng-model="user.name" name="uName" required /><br />
    E-mail:
      <input type="email" ng-model="user.email" name="uEmail" required/><br />
    <div ng-show="form.uEmail.$dirty && form.uEmail.$invalid">Invalid:
      <span ng-show="form.uEmail.$error.required">Tell us your email.</span>
      <span ng-show="form.uEmail.$error.email">This is not a valid email.</span>
    </div>

    Gender: <input type="radio" ng-model="user.gender" value="male" />male
    <input type="radio" ng-model="user.gender" value="female" />female<br />

    <input type="checkbox" ng-model="user.agree" name="userAgree" required />
    I agree: <input ng-show="user.agree" type="text" ng-model="user.agreeSign"
              required /><br />
    <div ng-show="!user.agree || !user.agreeSign">Please agree and sign.</div>

    <button ng-click="reset()" ng-disabled="isUnchanged(user)">RESET</button>
    <button ng-click="update(user)"
            ng-disabled="form.$invalid || isUnchanged(user)">SAVE</button>
  </form>
</div>

<script>
  function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      $scope.user = angular.copy($scope.master);
    };

    $scope.isUnchanged = function(user) {
      return angular.equals(user, $scope.master);
    };

    $scope.reset();
  }
</script>
</doc:source>
</doc:example>



# Параметры валидации

Angular предоставляет базовый функционал для наиболее распространённых типов html5-{@link api/ng.directive:input полей} - {@link api/ng.directive:input.text text}, {@link api/ng.directive:input.number number}, {@link api/ng.directive:input.url url}, {@link api/ng.directive:input.email email}, {@link api/ng.directive:input.radio radio}, {@link api/ng.directive:input.checkbox checkbox}. Также он поддерживает некоторые директивы для валидации (`required`, `pattern`, `minlength`, `maxlength`, `min`, `max`).

Для того чтобы определить собственный валидатор, вы должны определить директиву, которая добавит настраиваемую валидационную функцию в {@link api/ng.directive:ngModel.NgModelController контроллер} `ngModel`. Чтобы получить этот контроллер, просто укажите его среди зависимостей, как на примере ниже. Валидация происходит в два шага:

  * **Обновление модели согласно представления Model to View update** -
    всякий раз когда связанная модель меняется, все функции в массиве {@link api/ng.directive:ngModel.NgModelController#$formatters NgModelController#$formatters} выполняются по очереди, и, таким образом, каждая из этих функций имеет возможность отформатировать значение и изменить состояние валидации элемента управления на форме посредством {@link api/ng.directive:ngModel.NgModelController#$setValidity NgModelController#$setValidity}.

  * **Обновление представления согласно модели** -
    действует похожим образом. Всякий раз, когда пользователь взаимодействует с элементом управления, вызывается функция {@link api/ng.directive:ngModel.NgModelController#$setViewValue NgModelController#$setViewValue}. Она в свою очередь вызывает последовательно все функции в массиве {@link api/ng.directive:ngModel.NgModelController#$parsers NgModelController#$parsers}, и, таким образом, каждая из этих функций имеет возможность преобразовать значение и поменять состояние валидации элемента управления через вызов {@link api/ng.directive:ngModel.NgModelController#$setValidity NgModelController#$setValidity}.

В следующем примере создаются две директивы.

  * Первая хранит `integer` и проверяет, чтобы введенное значение было целым числом. Для примера `1.23` - это неправильное значение, поскольку содержит дробную часть. Заметьте, что мы вызываем функцию unshift() для массива, вместо простой вставки. Это делается потому, что мы хотим чтобы наш парсер получал значение элемента управления первым, до конвертации значения в число. 

  * Вторая директива обрабатывает `smart-float`. Она парсит `1.2` и `1,2` в одинаково правильное дробное значение `1.2`. Заметьте, что мы не можем использовать тут тип imput-элемента `number`, поскольку HTML5 -браузеры не позволяют пользователю ввести `1,2`. Такое значение будет рассматриваться как ошибочное. 

<doc:example module="form-example1">
<doc:source>
<div>
  <form name="form" class="css-form" novalidate>
    <div>
      Size (integer 0 - 10):
      <input type="number" ng-model="size" name="size"
             min="0" max="10" integer />{{size}}<br />
      <span ng-show="form.size.$error.integer">This is not valid integer!</span>
      <span ng-show="form.size.$error.min || form.size.$error.max">
        The value must be in range 0 to 10!</span>
    </div>

    <div>
      Length (float):
      <input type="text" ng-model="length" name="length" smart-float />
      {{length}}<br />
      <span ng-show="form.length.$error.float">
        This is not a valid float number!</span>
    </div>
  </form>
</div>

<script>
  var app = angular.module('form-example1', []);

  var INTEGER_REGEXP = /^\-?\d*$/;
  app.directive('integer', function() {
    return {
      require: 'ngModel',
      link: function(scope, elm, attrs, ctrl) {
        ctrl.$parsers.unshift(function(viewValue) {
          if (INTEGER_REGEXP.test(viewValue)) {
            // it is valid
            ctrl.$setValidity('integer', true);
            return viewValue;
          } else {
            // it is invalid, return undefined (no model update)
            ctrl.$setValidity('integer', false);
            return undefined;
          }
        });
      }
    };
  });

  var FLOAT_REGEXP = /^\-?\d+((\.|\,)\d+)?$/;
  app.directive('smartFloat', function() {
    return {
      require: 'ngModel',
      link: function(scope, elm, attrs, ctrl) {
        ctrl.$parsers.unshift(function(viewValue) {
          if (FLOAT_REGEXP.test(viewValue)) {
            ctrl.$setValidity('float', true);
            return parseFloat(viewValue.replace(',', '.'));
          } else {
            ctrl.$setValidity('float', false);
            return undefined;
          }
        });
      }
    };
  });
</script>
</doc:source>
</doc:example>


# Реализация собственных элементов управления формы (с использованием `ngModel`)
Angular реализует все базовые элементы управления HTML формой ({@link api/ng.directive:input input}, {@link api/ng.directive:select select}, {@link api/ng.directive:textarea textarea}), которых должно быть достаточно в большинстве случаев. Тем не менее, если нужна большая гибкость, можно описать собственный элемент управления формы в виде директивы.

Для работы стандартных элементов управления с `ngModel` и чтобы добиться двухстороннего связывания необходимо:

  - выполнить метод `$render`, который отвечает за отображение данных после того, как осуществился {@link   api/ng.directive:ngModel.NgModelController#$formatters NgModelController#$formatters},
  - вызывать метод `$setViewValue`, когда пользователь взаимодействует с элементом управления и модель должна быть обновлена. Обычно это делается внутри наблюдателя DOM-событий.

См. так же {@link guide/directive $compileProvider.directive}

В следующем примере показано, как сделать двухстороннее связывание данных с элементом contentEditable.

<doc:example module="form-example2">
<doc:source>
<script>
  angular.module('form-example2', []).directive('contenteditable', function() {
    return {
      require: 'ngModel',
      link: function(scope, elm, attrs, ctrl) {
        // view -> model
        elm.bind('blur', function() {
          scope.$apply(function() {
            ctrl.$setViewValue(elm.html());
          });
        });

        // model -> view
        ctrl.$render = function() {
          elm.html(ctrl.$viewValue);
        };

        // load init value from DOM
        ctrl.$setViewValue(elm.html());
      }
    };
  });
</script>

<div contentEditable="true" ng-model="content" title="Click to edit">Some</div>
<pre>model = {{content}}</pre>

<style type="text/css">
  div[contentEditable] {
    cursor: pointer;
    background-color: #D0D0D0;
  }
</style>
</doc:source>
</doc:example>
