@ngdoc overview
@name Developer Guide: Templates: Связывание данных
@description

Связывание данных в веб-приложений Angular это автоматическая синхронизация данных между моделью и представлением. 
То, как Angular реализует связывание, позволяет рассматривать модель в качестве единственного источника истины в приложении. 
В любое время вид - это проекция модели. При изменении модели вид отражает изменения, и наоборот.

## Классический шаблон связывания данных

<img class="right" src="img/One_Way_Data_Binding.png"/>
<br/>
Большинство шаблонов связывают данные только в одном направлении: они объединяют шаблон вместе с моделью в виде, показанном на схеме. 
После того как произошло объединение, изменения в модели
или соответствующих областях вида НЕ отражаются автоматически в виде. Более того, любые изменения,
которые пользователь делает с видом, не отражаются в модели. Это означает, что разработчик должен
писать код, который постоянно синхронизирует вид с моделью и модель с видом.

## Шаблон связывания данных в Angular

<img class="right" src="img/Two_Way_Data_Binding.png"/>
Шаблон Angular работает по-другому, как показано на схеме. Они отличаются
потому что, во-первых, шаблон (который является неоткомпилированным HTML а также любой дополнительной разметкой или
директивой) компилируется браузером, а во-вторых, этап компиляции производит в живом виде. В живом, потому что любые изменения в виде, немедленно отражаются в модели, и любые изменения в
модели распространяются на вид. Это делает модель всегда единственным источником истинных данных о состоянии приложения, что значительно упрощает модель программирования для разработчиков. Вы можете думать о
виде просто как о мгновенной проекция вашей модели.

Поскольку вид просто проекции модели, контроллер полностью отделен от
него и не знают о виде. Это делает тестирование простым, потому что это легко протестировать контроллер в
отделении от вида и соответствующих DOM/браузернвх зависимостей.


## Связанные разделы

* {@link scope Angular Области видимости}
* {@link dev_guide.templates Шаблоны}
