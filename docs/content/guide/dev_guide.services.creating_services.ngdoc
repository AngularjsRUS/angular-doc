@ngdoc overview
@name Руководство разработчика: Сервисы Angular: Создание сервисов
@description

Не смотря на то, что Angular поставляется с набором полезных сервисов, для любого нетривиального
приложения будет полезно написать собственный сервис. Для этого необходимо зарегистрировать в модуле
фабричную функцию сервиса. Либо через {@link api/angular.module Module#factory api}, либо
напрямую, через {@link api/AUTO.$provide $provide api} внутри конфигурационной функции модуля.

Все сервисы Angular участвуют во {@link di внедрении зависимостей}, регистрируя себя в
системе зависимостей Angular (injector) с помощью своего `имени` (id), вместе с указанием
требуемых зависимостей для фабричной функции сервиса. Возможность подменять зависимости для
mock/stub/dummies в тестах упрощает тестирование сервисов.


# Регистрация сервисов

Для регистрации сервиса необходимо иметь модуль, частью которого будет этот сервис. После этого
можно зарегистрировать сервис в модуле через {@link api/angular.Module api модуля} или
используя сервис {@link api/AUTO.$provide $provide} конфигурационной функции модуля.
Следующий псевдо-код демонстрирует оба способа:

Используя angular.Module api:
<pre>
var myModule = angular.module('myModule', []);
myModule.factory('serviceId', function() {
  var shinyNewServiceInstance;
  //тело фабричной функции модуля, которая конструирует shinyNewServiceInstance
  return shinyNewServiceInstance;
});
</pre>

Используя сервис $provide:
<pre>
angular.module('myModule', [], function($provide) {
  $provide.factory('serviceId', function() {
    var shinyNewServiceInstance;
    //тело фабричной функции, которая конструирует shinyNewServiceInstance
    return shinyNewServiceInstance;
  });
});
</pre>

Заметьте, что регистрируется не экземпляр сервиса, а фабричная функция, которая создаст экземпляр
при вызове.


# Зависимости

Сервисы могут не только использоваться другими, но и иметь собственные зависимости. Они могут быть
указаны в аргументах фабричной функции. Прочтите так же о {@link di внедрении зависимости}
в Angular и использовании записи в виде массива и свойства $inject для защиты
от минификации кода.

Ниже представлен пример очень простого сервиса. Этот сервис зависит от сервиса `$window` (который
передаётся в качестве параметра в фабричную функцию) и является просто функцией. Сервис просто
записывает все уведомления, а после третьего он показывает все уведомления во всплывающем окне.

<pre>
angular.module('myModule', [], function($provide) {
  $provide.factory('notify', ['$window', function(win) {
    var msgs = [];
    return function(msg) {
      msgs.push(msg);
      if (msgs.length == 3) {
        win.alert(msgs.join("\n"));
        msgs = [];
      }
    };
  }]);
});
</pre>


# Создание экземпляров сервисов в Angular

Для всех сервисов Angular используется ленивое создание экземпляров. Это означает, что сервис будет создан только
в том случае, если он нужен для создания экземпляра другого сервиса или компонента приложения, который
зависит от него. Другими словами, Angular не создаст экземпляр сервиса, если только он не потребовался
приложению явным или неявным образом.


# Сервисы как одиночки

В заключении, важно понимать, что все сервисы Angular - одиночки приложения. Это означает, что
может быть только один экземпляр какого-то конкретного сервиса на один инжектор. Так как у Angular
смертельная аллергия на глобальное состояние, то можно создать несколько инжекторов, каждый со своим
собственным экземпляром сервиса, но это редко бывает необходимым, за исключением тестов, где
такое свойство требуется всегда.



## Связанные темы

* {@link dev_guide.services.understanding_services Понимание сервисов}
* {@link dev_guide.services.managing_dependencies Управление зависимостями сервисов}
* {@link dev_guide.services.injecting_controllers Внедрение сервисов в контроллеры}
* {@link dev_guide.services.testing_services Тестирование сервисов в Angular}

## Связанное API

* {@link api/ng API сервисов в Angular}
