@ngdoc overview
@name Tutorial: 8 - Больше шаблонов!
@description

<ul doc-tutorial-nav="8"></ul>


В этом уроке, вы напишете страничку с подробным описанием телефона, которая будет появляться когда
пользователь кликает по телефону из списка.


<div doc-tutorial-reset="8"></div>

Теперь, когда вы выбираете телефон из списка, появляется страничка с подробной информацией о нём.

Для получения данных, мы используем сервис {@link api/ng.$http $http}, а отображать их
будем через шаблон `phone-detail.html`.

Ключевые изменения приведены ниже, полный дифф вы можете просмотреть на {@link
https://github.com/angular/angular-phonecat/compare/step-7...step-8 GitHub}:

## Data

В дополнение к `phones.json`, директория `app/phones/` также содержит по одному JSON-файлу для каждого
телефона:

__`app/phones/nexus-s.json`:__ (пример)
<pre>
{
  "additionalFeatures": "Цветной дисплей, NFC, ...",
  "android": {
      "os": "Android 2.3",
      "ui": "Android"
  },
  ...
  "images": [
      "img/phones/nexus-s.0.jpg",
      "img/phones/nexus-s.1.jpg",
      "img/phones/nexus-s.2.jpg",
      "img/phones/nexus-s.3.jpg"
  ],
  "storage": {
      "flash": "16384MB",
      "ram": "512MB"
  }
}
</pre>


Каждый из этих файлов описывает характеристики телефона в однотипной структуре данных. Мы будем
отображать эти данные на странице описания телефона.


## Контроллер

Данные в контроллер `PhoneDetailCtrl` будут поступать из сервиса `$http`, который будет загружать JSON-файлы, как 
это делается в контроллере списка телефонов.

__`app/js/controllers.js`:__
<pre>
function PhoneDetailCtrl($scope, $routeParams, $http) {
  $http.get('phones/' + $routeParams.phoneId + '.json').success(function(data) {
    $scope.phone = data;
  });
}

//PhoneDetailCtrl.$inject = ['$scope', '$routeParams', '$http'];
</pre>

URL для HTTP-запроса формируется на основе параметра `$routeParams.phoneId`, который извлекается из
текущего пути сервисом `$route`.


## Шаблон

Мы заменили заглушку в предыдущем шаблоне на следующий код, который выводит данные о телефоне.
Обратите внимание на использование синтаксиса `{{выражение}}` и директиву `ngRepeat`, которые используются
для построения UI.


__`app/partials/phone-detail.html`:__
<pre>
<img ng-src="{{phone.images[0]}}" class="phone">

<h1>{{phone.name}}</h1>

<p>{{phone.description}}</p>

<ul class="phone-thumbs">
  <li ng-repeat="img in phone.images">
    <img ng-src="{{img}}">
  </li>
</ul>

<ul class="specs">
  <li>
    <span>Availability and Networks</span>
    <dl>
      <dt>Availability</dt>
      <dd ng-repeat="availability in phone.availability">{{availability}}</dd>
    </dl>
  </li>
    ...
  </li>
    <span>Additional Features</span>
    <dd>{{phone.additionalFeatures}}</dd>
  </li>
</ul>
</pre>

<div style="display: none">
TODO!
<img  class="diagram" src="img/tutorial/tutorial_08-09_final.png">
</div>

## Тестирование

Мы написали новый юнит-тест, очень похожий на тот, что мы написали для контроллера `PhoneListCtrl` в пятом уроке.

__`test/unit/controllersSpec.js`:__
<pre>
...
  describe('PhoneDetailCtrl', function(){
    var scope, $httpBackend, ctrl;

    beforeEach(inject(function(_$httpBackend_, $rootScope, $routeParams, $controller) {
      $httpBackend = _$httpBackend_;
      $httpBackend.expectGET('phones/xyz.json').respond({name:'phone xyz'});

      $routeParams.phoneId = 'xyz';
      scope = $rootScope.$new();
      ctrl = $controller(PhoneDetailCtrl, {$scope: scope});
    }));


    it('should fetch phone detail', function() {
      expect(scope.phone).toBeUndefined();
      $httpBackend.flush();

      expect(scope.phone).toEqual({name:'phone xyz'});
    });
  });
...
</pre>

Теперь, вы можете видеть следующий вывод в закладке Karma:

    Chrome 22.0: Executed 3 of 3 SUCCESS (0.039 secs / 0.012 secs)


Ещё мы добавили новый системный тест, который переходит на страничку информации о Nexus S и проверяет,
что заголовок страницы равен "Nexus S".

__`test/e2e/scenarios.js`:__
<pre>
...
  describe('Phone detail view', function() {

    beforeEach(function() {
      browser().navigateTo('../../app/index.html#/phones/nexus-s');
    });


    it('should display nexus-s page', function() {
      expect(binding('phone.name')).toBe('Nexus S');
    });
  });
...
</pre>


Теперь вы можете запустить `./scripts/e2e-test.sh` или обновить страничку браузера с системными тестами чтобы
проверить ход выполнения тестов. Или же вы можете наблюдать за ними в
{@link http://angular.github.com/angular-phonecat/step-8/test/e2e/runner.html сервере Angular}.


# Давайте поэкспериментируем

* Используя {@link guide/dev_guide.e2e-testing API системных тестов}, напишите тест, который проверяет что на
страничке информации о Nexus S отображается 4 миниатюры.


# Идём дальше

Теперь, когда страничка с подробной информацией о телефоне готова, переходите к {@link step_09 депятому уроку}, чтобы
узнать, как писать собственные фильтры.


<ul doc-tutorial-nav="8"></ul>
