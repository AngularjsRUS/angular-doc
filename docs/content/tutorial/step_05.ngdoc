@ngdoc overview
@name Tutorial: 5 - XHRs & Dependency Injection
@description

<ul doc-tutorial-nav="5"></ul>

Достаточно построить приложения с тремя телефонами в жестко заданном наборе данных! Попробуем получить 
больший набор данных с нашего сервера с помощью одного из встроенного в Angular {@link api/ng сервиса}, который
называется {@link api/ng.$http $http}. Будем использовать {@link guide/di инъекцию} для обеспечения работы
контроллера `PhoneListCtrl`.

<div doc-tutorial-reset="5"></div>


Сейчас виден список из 20 телефонов.

Наиболее важные изменения указаны ниже. Полные изменения можно просмотреть на {@link
https://github.com/angular/angular-phonecat/compare/step-4...step-5 GitHub}:


## Данные

Файл  `app/phones/phones.json` – это набор большого кол-ва данных, представленный в виде json-файла.

Часть данных из файла:
<pre>
[
 {
  "age": 13,
  "id": "motorola-defy-with-motoblur",
  "name": "Motorola DEFY\u2122 with MOTOBLUR\u2122",
  "snippet": "Are you ready for everything life throws your way?"
  ...
 },
...
]
</pre>


## Контроллер

Будем использовать встроенный сервис {@link api/ng.$http $http}, для создания http-запроса к `app/phones/phones.json` 
с целью получения данных из него. `$http` один из встроенных {@link api/ng angular сервисов}, которые обеспечивают
обработку обычных, для веб-приложений, операций. Angular позволяет вставлять их там, где необходимо.

Сервисы внедряются с помощтю {@link guide/di системы внедрения зависимостей}. Внедрение зависимости призвано помочь
строить строго структурированные веб-приложения (с распределёнными компонентами для отображения, данных и управления),
так и слабоструктурированные (зависимости между компонентами не обрабатываются самими компонентами, эту функцию
выполняет система внедрения зависимостей).


__`app/js/controllers.js:`__
<pre>
function PhoneListCtrl($scope, $http) {
  $http.get('phones/phones.json').success(function(data) {
    $scope.phones = data;
  });

  $scope.orderProp = 'age';
}

//PhoneListCtrl.$inject = ['$scope', '$http'];
</pre>

`$http` создаёт HTTP GET запрос для нашего приложения, который обращается к `phone/phones.json` (ссылка относительна
к `index.html`). Сервер отвечает путём возвращения данных в json-файле. (Запрос может быть отослан не только к 
json-файлу, как сделано в этом учебнике, но и может быть динамически сгенерирован на сервере (при помощи php, например).
Для приложения и браузера это будет равносильно. Такой формат был взят для упрощения примера.)

Сервис `$http` возвращает {@link api/ng.$q обещание} с методом `success`. Мы обращаемся к этому методу, для обработки
ответа асинхронного запроса и присваивания данных к нашей области видимости, которая контролируется этим контроллером,
как модель списка телефонов. Стоит отметить, что Angular обнаруживает ответ в формате json и парсит его для нас.

Для использования сервисов в Angular, необходимо объявить имя зависимостей которые необходимы, в качестве аргументов
для функции конструктора контроллера, например

     function PhoneListCtrl($scope, $http) {...}
     
Система внедрение зависимостей Angular подключает службу к контроллеру в момент его построения. Внедрение зависимостей
так же отвечает за создание переходных (временных) зависимостей, которые могут содержаться в сервисе
(сервисы часто зависят от других сервисов).

Обратите внимание, что имена аргументов имеют значения, потому что инжектор использует их для поиска зависимостей.

<img  class="diagram" src="img/tutorial/xhr_service_final.png">


### Префикс '$' в именах

Можно создать собственные сервисы, и на самом деле мы будем делать это в в шаге 11. В соглашении об
именовании сервисов Angular, методов областей видимости и другого API выделяется префикс '$' в начале имени.
Не используйте этот префикс для именования собственных сервисов и моделей чтобы избежать возможного конфликта имен.


### Заметка о минификации

С того момента, когда Angular читает зависимости контроллера из имен аргументов в конструкторе контроллера, если
вы {@link http://en.wikipedia.org/wiki/Minification_(programming) минифицируете} javascript-код контроллера
`PhoneListCtrl`, то все аргументы так же будут минифицированы и инжектор зависимостей не сможет их идентифицировать.

Существует 2 способа решения проблем, связанных с минификацией:

* Запишите зависимости в свойство `$inject` как массив строк, после чего укажите функцию-контроллер.

    PhoneListCtrl.$inject = ['$scope', '$http'];

* Используйте скобки, которыми оборачивается функция, в которых будет задан массив строк (представляющих
имена зависимостей) с последующим функцией для внедрения:

    var PhoneListCtrl = ['$scope', '$http', function($scope, $http) { /* тело конструктора */ }];

Оба этих метода работают с любой функцией, которая может быть внедрена в Angular, так что решайте сами,
какой стиль использовать.


## Тестирование

__`test/unit/controllersSpec.js`:__

Because we started using dependency injection and our controller has dependencies, constructing the
controller in our tests is a bit more complicated. We could use the `new` operator and provide the
constructor with some kind of fake `$http` implementation. However, the recommended (and easier) way
is to create a controller in the test environment in the same way that angular does it in the
production code behind the scenes, as follows:

<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){
    var scope, ctrl, $httpBackend;

    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {
      $httpBackend = _$httpBackend_;
      $httpBackend.expectGET('phones/phones.json').
          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);

      scope = $rootScope.$new();
      ctrl = $controller(PhoneListCtrl, {$scope: scope});
    }));
</pre>

Note: Because we loaded Jasmine and `angular-mocks.js` in our test environment, we got two helper
methods {@link api/angular.mock.module module} and {@link api/angular.mock.inject inject} that we'll
use to access and configure the injector.

We created the controller in the test environment, as follows:

* We used the `inject` helper method to inject instances of
{@link api/ng.$rootScope $rootScope},
{@link api/ng.$controller $controller} and
{@link api/ng.$httpBackend $httpBackend} services into the Jasmine's `beforeEach`
function. These instances come from an injector which is recreated from scratch for every single
test. This guarantees that each test starts from a well known starting point and each test is
isolated from the work done in other tests.

* We created a new scope for our controller by calling `$rootScope.$new()`

* We called the injected `$controller` function passing the `PhoneListCtrl` function and the created
scope as parameters.

Because our code now uses the `$http` service to fetch the phone list data in our controller, before
we create the `PhoneListCtrl` child scope, we need to tell the testing harness to expect an
incoming request from the controller. To do this we:

* Request `$httpBackend` service to be injected into our `beforeEach` function. This is a mock
version of the service that in a production environment facilitates all XHR and JSONP requests.
The mock version of this service allows you to write tests without having to deal with
native APIs and the global state associated with them — both of which make testing a nightmare.

* Use the `$httpBackend.expectGET` method to train the `$httpBackend` service to expect an incoming
HTTP request and tell it what to respond with. Note that the responses are not returned until we call
the `$httpBackend.flush` method.

Now, we will make assertions to verify that the `phones` model doesn't exist on `scope` before
the response is received:

<pre>
    it('should create "phones" model with 2 phones fetched from xhr', function() {
      expect(scope.phones).toBeUndefined();
      $httpBackend.flush();

      expect(scope.phones).toEqual([{name: 'Nexus S'},
                                   {name: 'Motorola DROID'}]);
    });
</pre>

* We flush the request queue in the browser by calling `$httpBackend.flush()`. This causes the
promise returned by the `$http` service to be resolved with the trained response.

* We make the assertions, verifying that the phone model now exists on the scope.

Finally, we verify that the default value of `orderProp` is set correctly:

<pre>
    it('should set the default value of orderProp model', function() {
      expect(scope.orderProp).toBe('age');
    });
  });
});
</pre>

You should now see the following output in the Karma tab:

       Chrome 22.0: Executed 2 of 2 SUCCESS (0.028 secs / 0.007 secs)



# Experiments

* At the bottom of `index.html`, add a `{{phones | json}}` binding to see the list of phones
  displayed in json format.

* In the `PhoneListCtrl` controller, pre-process the http response by limiting the number of phones
to the first 5 in the list. Use the following code in the $http callback:

         $scope.phones = data.splice(0, 5);


# Summary

Now that you have learned how easy it is to use angular services (thanks to Angular's dependency
injection), go to {@link step_06 step 6}, where you will add some
thumbnail images of phones and some links.


<ul doc-tutorial-nav="5"></ul>
