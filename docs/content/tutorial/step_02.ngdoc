@ngdoc overview
@name Tutorial: 2 - Шаблоны Angular
@description

<ul doc-tutorial-nav="2"></ul>

Теперь настало время, чтобы сделать нашу веб-страницу динамичной - с помощью AngularJS. Мы также добавим тест, 
который будет проверять код контроллера, который мы собираемся добавить.

Есть много способов как структурировать код приложения. Для Angular-приложений, мы призываем использовать {@link 
http://en.wikipedia.org/wiki/Model–View–Controller шаблон проектирования "Модель-Представление-Контроллер" (MVC)}, 
который разделяет модель данных приложения, пользовательский интерфейс и взаимодействие с пользователем на три 
отдельных компонента и тем самым разделяет и локализует возможные проблемы. Имея в виду этот подход (MVC), 
давайте, используя немного Angular`а и JavaScript`а, добавим модель (model), представление (view) и 
контроллер (controller) в наше приложение.

<div class="tabbable" show="true">

  <div class="tab-pane well" id="git-mac" title="Git на Mac/Linux">
    <ol>
      <li><p>Откатите ваш рабочий код до шага 2.</p>
          <pre>git checkout -f step-2</pre>
      </li>
      <li><p>Перезагрузите страницу или проверьте приложение на 
             <a href="http://angular.github.com/angular-phonecat/step-2/app">сервере Angular</a>.
          </p>
      </li>
    </ol>
  </div>
  
  <div class="tab-pane well" id="git-win" title="Git на Windows">
    <ol>
      <li><p>Откатите ваш рабочий код до шага 2.</p>
          <pre>git checkout -f step-2</pre>
      </li>
      <li><p>Перезагрузите страницу или проверьте приложение на 
             <a href="http://angular.github.com/angular-phonecat/step-2/app">сервере Angular</a>.
          </p>
      </li>
    </ol>
  </div>
  
</div>


Сейчас ваше приложение содержит список с тремя телефонами.

Наиболее важные изменения перечислены ниже. Вы можете увидеть полный список изменений перейдя по ссылке {@link
https://github.com/angular/angular-phonecat/compare/step-1...step-2 GitHub}:


## Представление и Шаблон

В Angular`е, __представление__ (__view__) это проекция модели (model) через HTML-__шаблон__ (__template__). 
Это означает, что всякий раз, когда модель изменяется, Angular обновляет соответствующие связывания (binding points), 
которые обновляют представление (view).

Представление (view) строится Angular`ом из шаблона. Для нашего приложения шаблон представлен ниже:

__`app/index.html`:__
<pre>
<html ng-app>
<head>
  ...
  <script src="lib/angular/angular.js"></script>
  <script src="js/controllers.js"></script>
</head>
<body ng-controller="PhoneListCtrl">

  <ul>
    <li ng-repeat="phone in phones">
      {{phone.name}}
      <p>{{phone.snippet}}</p>
    </li>
  </ul>
</body>
</html>
</pre>

Мы заменили список телефонов, который раньше был набран нами вручную (hard-coded), на 
{@link api/ng.directive:ngRepeat ngRepeat директиву} и два {@link guide/expression Angular-выраженения}, 
заключенных в фигурные скобки: `{{phone.name}}` и `{{phone.snippet}}`:

* Оператор `ng-repeat="phone in phones"` в теге `<li>` это Angular-повторитель (Angular repeater).
  Повторитель говорит Angular'у, что нужно создать элемент `<li>` для каждого телефона из списка, 
  используя первый тег `<li>` как шаблон (основу).

* Как мы узнали на шаге 0, фигурные скобки вокруг выражений `phone.name` и `phone.snippet` означают 
  связывание данных (bindings). В отличие от константного значения, эти выражения ссылаются на модель нашего
  приложения, которая была создана в контроллере `PhoneListCtrl`.

      <img class="diagram" src="img/tutorial/tutorial_02.png">


##  Модель и Контроллер

Данные __модели__ (__model__) являются простым массивом телефонов. Каждое описание телефона представленно 
в виде объекта в литеральной нотации, т. е. объектом-литералом (object literal notation). Модель создается
в контроллере (__controller__) `PhoneListCtrl`:

__`app/js/controllers.js`:__
<pre>
function PhoneListCtrl($scope) {
  $scope.phones = [
    {"name": "Nexus S",
     "snippet": "Fast just got faster with Nexus S."},
    {"name": "Motorola XOOM™ with Wi-Fi",
     "snippet": "The Next, Next Generation tablet."},
    {"name": "MOTOROLA XOOM™",
     "snippet": "The Next, Next Generation tablet."}
  ];
}
</pre>




Хотя контроллер еще не сделал очень многого для управления, но он играет решающую роль. 
Говоря про определение контекста (context) для нашей модели, отметим, что контроллер позволяет нам 
установить связывание данных (data-binding) между моделью (model) и представлением (view). 
Мы соединили точки между представлением (presentation), данными и логическими элементами следующим образом:

* `PhoneListCtrl` - имя нашей функции для контроллера (находится в файле JavaScript 
  `controllers.js`), совпадает со значением директивы {@link api/ng.directive:ngController `ngController`},
  расположенной в теге `<body>`.

* Данные о телефоне устанавливаются и сохраняются в *области видимости* (`$scope`), это происходит
  внутри функции нашего контроллера. Область видимости контроллера (controller scope) является 
  потомком корневой области видимости (root scope), которая была создана при инициализации приложения. 
  Область видимости контроллера (controller scope) доступна для всех связанных данных (bindings)
  в пределах тега `<body ng-controller="PhoneListCtrl">`.

Концепция *области видимости* (scope) является очень важной в Angular'е; *область видимости* (scope)
можно рассматривать как клей, который позволяет шаблону (template), модели (model) и 
контоллеру (controller) работать совместно. Angular использует *область видимости* (scope), 
вместе с информацией из шаблона, данными из модели и контроллером, для синхронизации данных между 
моделями (models) и представлениями (views). Любые изменения, внесенные в модель отражаются 
в представлении, любые изменения, которые происходят в представлении отражаются в модели.

Узнать больше об *области видимости* в Angular можно {@link 
api/ng.$rootScope.Scope здесь}.


## Тесты

"Путь Angular" позволяет легко тестировать код, который в настоящее время находится в разработке. 
Давайте рассмотрим следующий модульный тест (unit test) для созданного нами котроллера (controller):

__`test/unit/controllersSpec.js`:__
<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){

    it('should create "phones" model with 3 phones', function() {
      var scope = {},
          ctrl = new PhoneListCtrl(scope);

      expect(scope.phones.length).toBe(3);
    });
  });
});
</pre>

Тест проверяет, что у нас есть три записи в массиве телефонов. Этот пример демонстрирует, как можно
легко создать модульный тест (unit test) для кода в Angular-е. Поскольку тестирование является важной 
частью разработки программного обеспечения, а мы можем легко создавать тесты в Angular-е, таким образом 
разработчикам рекомендуется писать их.

Angular разработчики предпочитают синтаксис фреймворка Jasmine, когда пишут тесты. Jasmine предоставляет 
подход к тестированию JavaScript кода, называемый - разработка, основанная на функционировании 
(Behavior-driven Development, BDD). Хотя Angular не требует использовать Jasmine, мы написали все тесты в
этом учебнике на Jasmine-е. Вы можете больше узнать о Jasmine на {@link
http://pivotal.github.com/jasmine/ Домашней странице Jasmine} и в {@link
https://github.com/pivotal/jasmine/wiki Вики по Jasmine}.

Проект `angular-seed` предварительно настроен для запуска всех модульных тестов (unit tests) с помощью {@link
http://karma-runner.github.io/ Karma}. Для запуска теста, выполните следующие действия:

1. В _отдельном_ окне терминала или новой вкладке, перейдите в директорию `angular-phonecat` и запустите 
   файл `./scripts/test.sh` (для Windows: файл `./scripts/test.bat`). Этот скрипт запустит Karma-сервер (конфигурационный файл, необходимый для 
   запуска сервера, расположен в `./config/testacular.conf.js`).

2. Karma автоматически запустит новый экземпляр браузера Chrome. Просто игнорируйте его, дайте ему поработать в
   фоновом режиме. Karma будет использовать этот браузер для выполнения тестов.

3. Вы должны увидеть следующие или аналогичные сообщения в терминале:

             info: Karma server started at http://localhost:9876/
             info (launcher): Starting  browser "Chrome"
             info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n
             Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)

  Ура! Тест пройден! Или нет ...

4. Чтобы снова запустить тесты, просто измените исходный код или тестовые файлы. Karma заметит изменения
   и перезапустит тесты для вас. Разве это не мило?


# Давайте поэкспериментируем

* Добавьте другое связывание (binding) в `index.html`. Для примера:

          <p>Total number of phones: {{phones.length}}</p>

* Создайте новое свойство модели в контроллере и свяжите его (новое свойство). Для примера:

          $scope.hello = "Hello, World!"

  Обновите браузер, чтобы убедиться, что отобразится: "Hello, World!"

* Создайте повторитель, который строит простую таблицу:

          <table>
            <tr><th>row number</th></tr>
            <tr ng-repeat="i in [0, 1, 2, 3, 4, 5, 6, 7]"><td>{{i}}</td></tr>
          </table>

  Теперь давайте сделаем список, начинающийся с 1, для этого в связывании данных (binding) 
  прибавим к `i` единицу:

          <table>
            <tr><th>row number</th></tr>
            <tr ng-repeat="i in [0, 1, 2, 3, 4, 5, 6, 7]"><td>{{i+1}}</td></tr>
          </table>

* Сделайте так, чтобы модульный тест (unit test) не прошел, для этого измените оператор `toBe(3)` на `toBe(4)`.


# Идем дальше

Теперь у вас есть динамическое приложение, которое имеет отдельную модель (model), представление (view)
и контроллер (controller), кроме того, вы можете тестировать ваш код. Теперь, давайте перейдем к {@link 
step_03 шагу 3}, и вы узнаете, как добавить полнотекстовый поиск (full text search) в ваше приложение.


<ul doc-tutorial-nav="2"></ul>
