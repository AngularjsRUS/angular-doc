@ngdoc overview
@name UI-Router: Вложенные состояния
@description

Состояние могут быть вложенными друг в друга. Задать вложенность можно несколькими способами:

Можно использовать синтаксис с точкой, чтобы заключить иерархию в $stateProvider. Ниже, `contacts.list` становится
потомком `contacts`. 
<pre>
$stateProvider
  .state('contacts', {})
  .state('contacts.list', {});
</pre>

В качестве альтернативы, можно указать родительское состояние через свойство `parent`.
<pre>
$stateProvider
  .state('contacts', {})
  .state('list', {
    parent: 'contacts'
  });
</pre>

#### Объектно ориентированные состояния
Если не любите использовать состояния на основе строки, можно также использовать объектно-ориентированные состояния.
Имя `name` свойства переходит _в_ объект и свойство родителя `parent` должно быть установлено во всех дочерних
состояниях, как показано здесь:

<pre>
var contacts = { 
    name: 'contacts',  //обязательно
    templateUrl: 'contacts.html'
}
var contactsList = { 
    name: 'list',      //обязательно
    parent: contacts,  //обязательно
    templateUrl: 'contacts.list.html'
}

$stateProvider
  .state(contacts)
  .state(contactsList)
</pre>

Обычно можно ссылаться на объект напрямую, когда используются другие методы и параметры сравнения:
<pre>
$state.transitionTo(states.contacts);
$state.self === states.contacts;
$state.includes(states.contacts)
</pre>

#### Прикрепление пользовательских данных к объекту состояния
Можно прикрепить пользовательские данные к объекту состояния (для избежания конфликтов рекомендуем использовать
параметр `data`). 
<pre>
// Пример показывает объектно ориентированное состояние и состояние на основе строки
var contacts = { 
    name: 'contacts',
    templateUrl: 'contacts.html',
    data: {
        customData1: 5,
        customData2: "blue"
    }  
}
$stateProvider
  .state(contacts)
  .state('contacts.list', {
    templateUrl: 'contacts.list.html',
    data: {
        customData1: 44,
        customData2: "red"
    } 
  })
</pre>
Учитывая указанные выше примеры состояний, можно получить доступ к данным следующим образом:
<pre>
function Ctrl($state){
    console.log($state.current.data.customData1) // результат 5;
    console.log($state.current.data.customData2) // результат "blue";
}
</pre>

### Вложенные виды
Дочерние состояния будут загружать свои шаблоны в `ui-view` их родителей.
<pre>
$stateProvider
  .state('contacts', {
    templateUrl: 'contacts.html',
    controller: function($scope){
      $scope.contacts = [{ name: 'Alice' }, { name: 'Bob' }];
    }
  })
  .state('contacts.list', {
    templateUrl: 'contacts.list.html'
  });

function MainCtrl($state){
  $state.transitionTo('contacts.list');
}
</pre>
<pre>
<!-- index.html -->
<body ng-controller="MainCtrl">
  <div ui-view></div>
</body>
</pre>
<pre>
<!-- contacts.html -->
<h1>My Contacts</h1>
<div ui-view></div>
</pre>
<pre>
<!-- contacts.list.html -->
<ul>
  <li ng-repeat="contact in contacts">
    <a>{{contact.name}}</a>
  </li>
</ul>
</pre>

### Наследование от родительских состояний
Когда приложение находится в конкретном состоянии (или, когда состояние является «active»), все состояния его предков
также неявно активируются. В примере, когда состояние «contacts.list» активно, состояние «contacts» так же неявно
активно. Дочерние состояния наследуют виды (шаблоны/контроллеры)и разрешают зависимости от родительского состояния(й),
которое они могут переопределить.

Здесь `contacts.list` и `contacts.detail` оба наследуют контроллер от `contacts`:
<pre>
$stateProvider
  .state('contacts', {
    template: '<h1>My Contacts</h1>',
    controller: function($scope){
      $scope.contacts = [{ name: "Alice", favpet: "Mouse" }, 
                         { name: "Bob", favpet: "Python" }];
    }
  })
  .state('contacts.list', {
    template: '<ul><li ng-repeat="contact in contacts">' +
                 '<a ui-state-ref="contacts.detail">{{contact.name}}</a>' +
              '</li></ul>'
  })
  .state('contacts.detail', {
    template: "{{contact.name}}'s favorite pet is {{contact.favpet}}"
  });
</pre>
#### Абстрактные состояния
Абстрактное состояние может иметь дочерние состояния, но не может получить активированное само себя. «Абстрактное»
состояние это простое состояние, в которое нельзя переходить, потому что оно просто обеспечивает некоторое UI или 
зависимости, являющиеся общими для своих дочерних состояний.

Ниже пример, где состояние «contacts» является абстрактным. Его основной целью является предоставление своих дочерних
состояний, имеющих доступ к данным $scope.contacts. $scope.contacts будет доступно для интерполяции как дочернее 
состояние вида.
<pre>
$stateProvider
    .state('contacts', {
        abstract: true,
        templateUrl: 'contacts.html',
        controller: function($scope){
            $scope.contacts = [{ name: "Alice" }, { name: "Bob" }];
    })
    .state('contacts.list', {
        templateUrl: 'contacts.list.html'
    })
    .state('contacts.detail', {
        templateUrl: 'contacts.detail.html'
    })
</pre>
